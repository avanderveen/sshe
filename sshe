#!/usr/bin/env ruby

require "json"
require "optparse"
require "yaml"

CONFIG_FILE = ".sshe.yaml"
HOME_CONFIG_FILE = "#{Dir.home}/#{CONFIG_FILE}"

Options = Struct.new(:ssh, :aws)
OptionsSSH = Struct.new(:key, :user)
OptionsAWS = Struct.new(:profile, :region)

def get_config()
    path = [CONFIG_FILE, HOME_CONFIG_FILE]
        .select {|path| File.exist?(path)}
        .first
    config = path ? YAML.load_file(path) : {}
    config["ssh"] = {} if not config["ssh"]
    config["aws"] = {} if not config["aws"]
    config
end

def get_options(config, args)
    options = Options.new(OptionsSSH.new(
        config["ssh"]["key"],
        config["ssh"]["user"]
    ), OptionsAWS.new(
        config["aws"]["profile"],
        config["aws"]["region"]
    ))

    OptionParser.new do |opts|
        opts.banner = "Usage: sshe [options]"

        opts.on("-kSSH_KEY", "--ssh-key=SSH_KEY", "SSH key") do |ssh_key|
            options.ssh.key = ssh_key
        end

        opts.on("-uSSH_USER", "--ssh-user=SSH_USER", "SSH user") do |ssh_user|
            options.ssh.user = ssh_user
        end

        opts.on("-pAWS_PROFILE", "--aws-profile=AWS_PROFILE", "AWS profile") do |aws_profile|
            options.aws.profile = aws_profile
        end

        opts.on("-rAWS_REGION", "--aws-region=AWS_REGION", "AWS region") do |aws_region|
            options.aws.region = aws_region
        end
    end.parse!(args)

    options
end

class ExpectedError < ::StandardError; end

class CancelledError < ExpectedError
    def to_s; "Cancelled"; end;
end

class NoSSHUserError < ExpectedError
    def to_s; "No user specified. User must be given in the config or via command line argument."; end
end

class NoSSHKeyError < ExpectedError
    def to_s; "No SSH key specified"; end
end

class SSHKeyNotFoundError < ExpectedError
    def initialize(key); @key = key; end
    def to_s; "File not found for SSH key: #{@key}"; end
end

def main(args)
    options = get_options(get_config(), args)
    profile = options.aws.profile ? "--profile #{options.aws.profile}" : ""
    region  = options.aws.region  ? "--region #{options.aws.region}"   : ""
    instances = JSON.parse(
        `aws ec2 describe-instances --filters Name=instance-state-name,Values=running #{profile} #{region}`
    )["Reservations"].map {|r| r["Instances"]}.flatten

    menuOptions = Hash[*instances.map do |instance|
        name = instance["Tags"].select {|tag| tag["Key"] == "Name"}.map {|tag| tag["Value"]}.first
        id = instance["InstanceId"]
        url = instance["PublicDnsName"]
        key = instance["KeyName"]
        [name || id, {url: url, key: key}]
    end.flatten]

    height = `tput lines`.strip
    width = `tput cols`.strip
    menuHeight = menuOptions.length
    tags = menuOptions.keys.map {|key| "\"#{key}\""}.join(" ")
    choice = `dialog --output-fd 1 --no-items --menu "Running instances" #{height} #{width} #{menuHeight} #{tags}`

    raise CancelledError if not menuOptions.has_key?(choice)
    url = menuOptions[choice][:url]
    key = options.ssh.key || "#{Dir.home}/.ssh/#{menuOptions[choice][:key]}.pem"
    user = options.ssh.user

    raise NoSSHUserError if not user
    raise NoSSHKeyError if not key
    raise SSHKeyNotFoundError.new(key) if not File.exist?(key)

    command = "ssh -i #{key} #{user}@#{url}"
    puts command
    exec command
end

begin
    main(ARGV)
rescue ExpectedError => expected
    puts expected
end
